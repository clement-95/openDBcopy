subprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()
    }

    sourceSets {
        main {
            java {
                srcDirs 'src'
            }
            resources {
                srcDirs 'resources'
            }
        }
    }

    dependencies {
        implementation group: 'log4j', name: 'log4j', version: '1.2.17'
        implementation group: 'org.jdom', name: 'jdom2', version: '2.0.6'
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
        implementation group: 'org.ostermiller', name: 'utils', version: '1.07.00'
        implementation group: 'xerces', name: 'xercesImpl', version: '2.11.0'
        implementation group: 'tablelayout', name: 'TableLayout', version: '20050920'
        implementation group: 'org.codehaus.izpack', name: 'izpack-maven-plugin', version: '5.1.2'
        implementation group: 'org.codehaus.izpack', name: 'izpack-installer', version: '5.1.2'
        implementation group: 'com.puppycrawl.tools', name: 'checkstyle', version: '8.8'
        implementation group: 'cglib', name: 'cglib', version: '3.2.6'
        implementation group: 'net.sourceforge.jtds', name: 'jtds', version: '1.3.1'
        implementation group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'

        testImplementation 'junit:junit:4.11'
    }

    if (project.name != 'opendbcopy') {
        dependencies {
            implementation project(':opendbcopy')
        }

        defaultTasks 'clean'

        task createjar(dependsOn: 'compile', type: Jar) {
            archiveName "${project.name}.jar"
            destinationDir libsDir
            from buildDir.name
            from sourceSets.main.java.srcDirs
            exclude libsDirName
            exclude "tmp"
        }

        task deploy(dependsOn: ['clean', 'compile', 'createjar']) {
            delete "$OPENDBCOPY_HOME/plugins/$project.name"

            copy {
                from pluginFile
                from guiFile
                into "$OPENDBCOPY_HOME/plugins/$project.name"
            }

            copy {
                from libsDir
                into "$OPENDBCOPY_HOME/plugins/$project.name/$libsDirName"
            }
        }

        task dist(dependsOn: ['clean', 'createjar', 'javadoc'], type: Zip) {
            doFirst {
                def folder = new File("$distsDirName" as String)

                if (!folder.exists()) {
                    folder.mkdirs()
                } else {
                    delete "$distsDirName"
                }
            }

            copy {
                from pluginFile
                from guiFile
                from 'README'
                from 'build.gradle'
                into "$distsDirName/$project.name"
            }

            copy {
                from sourceSets.main.java.srcDirs
                into "$distsDirName/$project.name/src"
            }

            copy {
                from sourceSets.main.resources
                into "$distsDirName/$project.name/resources"
            }

            archiveName "${applicationName}-${project.name}-${version}.zip"
            from "$distsDirName/$project.name"
            destinationDir file(distsDirName)

            doLast {
                delete "$distsDirName/$project.name"
            }
        }
    }

    task compile(type: JavaCompile) {
        println "Compiling source directory for $project.name"
        source = sourceSets.main.java.srcDirs
        destinationDir = buildDir
        classpath = sourceSets.main.compileClasspath

        doLast {
            println "Copying resources directory"
            copy {
                from sourceSets.main.resources
                into buildDir.name
            }
        }
    }

    clean {
        println "Cleaning $buildDir.name & $distsDirName directory for $project.name"
        delete buildDir.name, distsDirName, 'plugins'
    }

    task rebuild(dependsOn: ['clean', 'compile'])
}